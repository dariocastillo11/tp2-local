name: "Style check"
description: "Style check using clang-format"

runs:
  using: "composite"
  steps:
    - name: "Run clang-format"
      shell: bash
      run: |
        # Ruta del proyecto
        PROJECT_PATH=$(pwd)

        # Inicializar la lista de archivos fuente vacía
        SOURCE_FILES=""

        # Verificar existencia de carpetas antes de ejecutar find
        if [ -d "$PROJECT_PATH/src" ]; then
          SOURCE_FILES=$(find "$PROJECT_PATH/src" -type f \( -name "*.cpp" -or -name "*.hpp" -or -name "*.h" -or -name "*.c" \) | tr "\n" " ")
        fi

        if [ -d "$PROJECT_PATH/include" ]; then
          SOURCE_FILES="$SOURCE_FILES $(find "$PROJECT_PATH/include" -type f \( -name "*.cpp" -or -name "*.hpp" -or -name "*.h" -or -name "*.c" \) | tr "\n" " ")"
        fi

        # Descomentar para incluir lib si existe
        # if [ -d "$PROJECT_PATH/lib" ]; then
        #   SOURCE_FILES="$SOURCE_FILES $(find "$PROJECT_PATH/lib" -type f \( -name "*.cpp" -or -name "*.hpp" -or -name "*.h" -or -name "*.c" \) | tr "\n" " ")"
        # fi

        ERROR_FILE_FLAG="$PROJECT_PATH/clang-format_errors.txt"

        echo "Running: clang-format -n $SOURCE_FILES"

        # Ejecutar clang-format y capturar errores
        clang-format -n $SOURCE_FILES 2> "$ERROR_FILE_FLAG"

        # Verificar si hay errores de formato
        if [ -s "$ERROR_FILE_FLAG" ]; then
            echo "Error: Algunos archivos no están formateados correctamente"
            cat "$ERROR_FILE_FLAG"
            exit 1
        else
            echo "Todos los archivos están formateados correctamente."
            rm -f "$ERROR_FILE_FLAG"
            exit 0
        fi

    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: "Clang-format errors"
        path: ./clang-format_errors.txt
        retention-days: 1
